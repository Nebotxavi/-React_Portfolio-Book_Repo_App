{"ast":null,"code":"import _objectSpread from \"/home/balaclava/Desktop/Javascript/react/100daysCode/01-Book_system/front_book_repo/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/balaclava/Desktop/Javascript/react/100daysCode/01-Book_system/front_book_repo/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/balaclava/Desktop/Javascript/react/100daysCode/01-Book_system/front_book_repo/src/components/bookForm.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { getBook, updateBook, saveBook } from \"../services/booksService\";\nimport { getGenres } from \"../services/genresService\";\nimport Input from \"./common/input\";\nimport Select from \"./common/select\";\n\nconst BookForm = ({\n  match: item\n}) => {\n  const _useState = useState({\n    title: \"\",\n    author_first_name: \"\",\n    author_second_name: \"\",\n    rate: \"\",\n    genre: \"\"\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        book = _useState2[0],\n        setBook = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        genres = _useState4[0],\n        setGenres = _useState4[1];\n\n  const urlId = item.params.id;\n  const isNew = urlId === \"new\" ? true : false;\n  useEffect(() => {\n    let shouldIgnore = false;\n\n    async function fetchGenres() {\n      const genres = await getGenres();\n      if (!shouldIgnore) setGenres(genres);\n    }\n\n    async function fetchBook() {\n      const book = await getBook(urlId);\n      if (!shouldIgnore) setBook(mapToState(book));\n    }\n\n    fetchGenres();\n    if (!isNew) fetchBook();\n    return () => {\n      shouldIgnore = true;\n    };\n  }, [item, isNew, urlId]);\n\n  function mapToState(book) {\n    return {\n      id: book.id,\n      title: book.title,\n      author_first_name: book.author_first_name,\n      author_second_name: book.author_second_name,\n      rate: book.rate,\n      genre: book.genre\n    };\n  }\n\n  function mapToFetchApi() {\n    const genreId = genres.filter(genre => genre.name === book.genre).map(genre => genre.id)[0];\n    return _objectSpread({}, book, {\n      genre: genreId\n    });\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    const mappedBook = mapToFetchApi();\n    if (!isNew) updateBook(book.id, mappedBook);else saveBook(mappedBook);\n  }\n\n  function renderInput(name, label, type = \"text\") {\n    return React.createElement(Input, {\n      name: name,\n      label: label,\n      type: type,\n      item: book,\n      setItem: setBook,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    });\n  }\n\n  function renderSelect(name, label) {\n    return React.createElement(Select, {\n      name: name,\n      label: label,\n      options: genres,\n      item: book,\n      setItem: setBook,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    });\n  }\n\n  return React.createElement(\"form\", {\n    onSubmit: e => handleSubmit(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, renderInput(\"title\", \"Title\"), renderInput(\"rate\", \"Rate\"), renderInput(\"author_first_name\", \"Name\"), renderInput(\"author_second_name\", \"Second name\"), renderSelect(\"genre\", \"Genre\"), React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn btn-primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, \"Save\"));\n};\n\nexport default BookForm;","map":{"version":3,"sources":["/home/balaclava/Desktop/Javascript/react/100daysCode/01-Book_system/front_book_repo/src/components/bookForm.jsx"],"names":["React","useEffect","useState","getBook","updateBook","saveBook","getGenres","Input","Select","BookForm","match","item","title","author_first_name","author_second_name","rate","genre","book","setBook","genres","setGenres","urlId","params","id","isNew","shouldIgnore","fetchGenres","fetchBook","mapToState","mapToFetchApi","genreId","filter","name","map","handleSubmit","e","preventDefault","mappedBook","renderInput","label","type","renderSelect"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { getBook, updateBook, saveBook } from \"../services/booksService\";\nimport { getGenres } from \"../services/genresService\";\nimport Input from \"./common/input\";\nimport Select from \"./common/select\";\n\nconst BookForm = ({ match: item }) => {\n  const [book, setBook] = useState({\n    title: \"\",\n    author_first_name: \"\",\n    author_second_name: \"\",\n    rate: \"\",\n    genre: \"\"\n  });\n  const [genres, setGenres] = useState([]);\n  const urlId = item.params.id;\n  const isNew = urlId === \"new\" ? true : false;\n\n  useEffect(() => {\n    let shouldIgnore = false;\n\n    async function fetchGenres() {\n      const genres = await getGenres();\n      if (!shouldIgnore) setGenres(genres);\n    }\n\n    async function fetchBook() {\n      const book = await getBook(urlId);\n      if (!shouldIgnore) setBook(mapToState(book));\n    }\n    fetchGenres();\n    if (!isNew) fetchBook();\n    return () => {\n      shouldIgnore = true;\n    };\n  }, [item, isNew, urlId]);\n\n  function mapToState(book) {\n    return {\n      id: book.id,\n      title: book.title,\n      author_first_name: book.author_first_name,\n      author_second_name: book.author_second_name,\n      rate: book.rate,\n      genre: book.genre\n    };\n  }\n\n  function mapToFetchApi() {\n    const genreId = genres\n      .filter(genre => genre.name === book.genre)\n      .map(genre => genre.id)[0];\n    return { ...book, genre: genreId };\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    const mappedBook = mapToFetchApi();\n    if (!isNew) updateBook(book.id, mappedBook);\n    else saveBook(mappedBook);\n  }\n\n  function renderInput(name, label, type = \"text\") {\n    return (\n      <Input\n        name={name}\n        label={label}\n        type={type}\n        item={book}\n        setItem={setBook}\n      />\n    );\n  }\n\n  function renderSelect(name, label) {\n    return (\n      <Select\n        name={name}\n        label={label}\n        options={genres}\n        item={book}\n        setItem={setBook}\n      />\n    );\n  }\n\n  return (\n    <form onSubmit={e => handleSubmit(e)}>\n      {renderInput(\"title\", \"Title\")}\n      {renderInput(\"rate\", \"Rate\")}\n      {renderInput(\"author_first_name\", \"Name\")}\n      {renderInput(\"author_second_name\", \"Second name\")}\n      {renderSelect(\"genre\", \"Genre\")}\n      <button type=\"submit\" className=\"btn btn-primary\">\n        Save\n      </button>\n    </form>\n  );\n};\n\nexport default BookForm;\n"]},"metadata":{},"sourceType":"module"}