{"ast":null,"code":"import _objectSpread from \"/home/balaclava/Desktop/Javascript/react/100daysCode/01-Book_system/front_book_repo/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/balaclava/Desktop/Javascript/react/100daysCode/01-Book_system/front_book_repo/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/balaclava/Desktop/Javascript/react/100daysCode/01-Book_system/front_book_repo/src/components/bookForm.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport Joi from \"joi-browser\";\nimport { getBook, updateBook, saveBook } from \"../services/booksService\";\nimport { getGenres } from \"../services/genresService\";\nimport Form from \"./common/form\";\n\nconst BookForm = ({\n  history,\n  match: item\n}) => {\n  const _useState = useState({\n    title: \"\",\n    author_first_name: \"\",\n    author_second_name: \"\",\n    rate: \"\",\n    genre: \"\"\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        book = _useState2[0],\n        setBook = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        genres = _useState4[0],\n        setGenres = _useState4[1];\n\n  const _useState5 = useState({}),\n        _useState6 = _slicedToArray(_useState5, 2),\n        errors = _useState6[0],\n        setErrors = _useState6[1];\n\n  const urlId = item.params.id;\n  const isNew = urlId === \"new\" ? true : false;\n  useEffect(() => {\n    let shouldIgnore = false;\n\n    async function fetchGenres() {\n      const genres = await getGenres();\n      if (!shouldIgnore) setGenres(genres);\n    }\n\n    async function fetchBook() {\n      const book = await getBook(urlId);\n      if (!shouldIgnore) setBook(mapToState(book));\n    }\n\n    fetchGenres();\n    if (!isNew) fetchBook();\n    return () => {\n      shouldIgnore = true;\n    };\n  }, [item, isNew, urlId]);\n\n  function mapToState(book) {\n    return {\n      id: book.id,\n      title: book.title,\n      author_first_name: book.author_first_name,\n      author_second_name: book.author_second_name,\n      rate: book.rate,\n      genre: book.genre\n    };\n  }\n\n  const schema = {\n    id: Joi.number(),\n    title: Joi.string().required(),\n    author_first_name: Joi.string().allow(\"\"),\n    author_second_name: Joi.string().allow(\"\"),\n    rate: Joi.number().min(1).max(10).required(),\n    genre: Joi.string().required()\n  };\n\n  function mapToFetchApi() {\n    const genreId = genres.filter(genre => genre.name === book.genre).map(genre => genre.id)[0];\n    return _objectSpread({}, book, {\n      genre: genreId\n    });\n  } // function validate() {\n  //   const options = { abortEarly: false };\n  //   const { error } = Joi.validate(book, schema, options);\n  //   if (!error) return null;\n  //   const errors = {};\n  //   for (let item of error.details) errors[item.path[0]] = item.message;\n  //   return errors;\n  // }\n  // function validateProperty({ name, value }) {\n  //   const obj = { [name]: value };\n  //   const propertySchema = { [name]: schema[name] };\n  //   const { error } = Joi.validate(obj, propertySchema);\n  //   return error ? error.details[0].message : null;\n  // }\n  // function handleChange({ currentTarget: input }) {\n  //   const allErrors = errors;\n  //   const errorMessage = validateProperty(input);\n  //   if (errorMessage) allErrors[input.name] = errorMessage;\n  //   else delete allErrors[input.name];\n  //   setErrors(allErrors);\n  //   setBook({ ...book, [input.name]: input.value });\n  // }\n  // function handleSubmit(e) {\n  //   e.preventDefault();\n  //   const errors = validate();\n  //   setErrors(errors || {});\n  //   if (errors) return;\n  //   doSubmit();\n  // }\n\n\n  async function doSubmit() {\n    const mappedBook = mapToFetchApi();\n    if (!isNew) await updateBook(book.id, mappedBook);else await saveBook(mappedBook);\n    history.push(\"/\");\n  } // function renderInput(name, label, type = \"text\") {\n  //   return (\n  //     <Input\n  //       name={name}\n  //       label={label}\n  //       type={type}\n  //       item={book}\n  //       setItem={setBook}\n  //       handleChange={handleChange}\n  //       error={errors[name]}\n  //     />\n  //   );\n  // }\n  // function renderSelect(name, label) {\n  //   return (\n  //     <Select\n  //       name={name}\n  //       label={label}\n  //       options={genres}\n  //       item={book}\n  //       setItem={setBook}\n  //       handleChange={handleChange}\n  //       error={errors[name]}\n  //     />\n  //   );\n  // }\n  // function renderButton(label) {\n  //   return (\n  //     <button type=\"submit\" className=\"btn btn-primary\" disabled={validate()}>\n  //       {label}\n  //     </button>\n  //   );\n  // }\n\n\n  return React.createElement(\"form\", {\n    onSubmit: e => handleSubmit(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, renderInput(\"title\", \"Title\"), renderInput(\"rate\", \"Rate\"), renderInput(\"author_first_name\", \"Name\"), renderInput(\"author_second_name\", \"Second name\"), renderSelect(\"genre\", \"Genre\"), renderButton(\"save\"));\n};\n\nexport default BookForm;","map":{"version":3,"sources":["/home/balaclava/Desktop/Javascript/react/100daysCode/01-Book_system/front_book_repo/src/components/bookForm.jsx"],"names":["React","useEffect","useState","Joi","getBook","updateBook","saveBook","getGenres","Form","BookForm","history","match","item","title","author_first_name","author_second_name","rate","genre","book","setBook","genres","setGenres","errors","setErrors","urlId","params","id","isNew","shouldIgnore","fetchGenres","fetchBook","mapToState","schema","number","string","required","allow","min","max","mapToFetchApi","genreId","filter","name","map","doSubmit","mappedBook","push","e","handleSubmit","renderInput","renderSelect","renderButton"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,SAASC,OAAT,EAAkBC,UAAlB,EAA8BC,QAA9B,QAA8C,0BAA9C;AACA,SAASC,SAAT,QAA0B,2BAA1B;AACA,OAAOC,IAAP,MAAiB,eAAjB;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,KAAK,EAAEC;AAAlB,CAAD,KAA8B;AAAA,oBACrBV,QAAQ,CAAC;AAC/BW,IAAAA,KAAK,EAAE,EADwB;AAE/BC,IAAAA,iBAAiB,EAAE,EAFY;AAG/BC,IAAAA,kBAAkB,EAAE,EAHW;AAI/BC,IAAAA,IAAI,EAAE,EAJyB;AAK/BC,IAAAA,KAAK,EAAE;AALwB,GAAD,CADa;AAAA;AAAA,QACtCC,IADsC;AAAA,QAChCC,OADgC;;AAAA,qBAQjBjB,QAAQ,CAAC,EAAD,CARS;AAAA;AAAA,QAQtCkB,MARsC;AAAA,QAQ9BC,SAR8B;;AAAA,qBASjBnB,QAAQ,CAAC,EAAD,CATS;AAAA;AAAA,QAStCoB,MATsC;AAAA,QAS9BC,SAT8B;;AAU7C,QAAMC,KAAK,GAAGZ,IAAI,CAACa,MAAL,CAAYC,EAA1B;AACA,QAAMC,KAAK,GAAGH,KAAK,KAAK,KAAV,GAAkB,IAAlB,GAAyB,KAAvC;AAEAvB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI2B,YAAY,GAAG,KAAnB;;AAEA,mBAAeC,WAAf,GAA6B;AAC3B,YAAMT,MAAM,GAAG,MAAMb,SAAS,EAA9B;AACA,UAAI,CAACqB,YAAL,EAAmBP,SAAS,CAACD,MAAD,CAAT;AACpB;;AAED,mBAAeU,SAAf,GAA2B;AACzB,YAAMZ,IAAI,GAAG,MAAMd,OAAO,CAACoB,KAAD,CAA1B;AACA,UAAI,CAACI,YAAL,EAAmBT,OAAO,CAACY,UAAU,CAACb,IAAD,CAAX,CAAP;AACpB;;AACDW,IAAAA,WAAW;AACX,QAAI,CAACF,KAAL,EAAYG,SAAS;AACrB,WAAO,MAAM;AACXF,MAAAA,YAAY,GAAG,IAAf;AACD,KAFD;AAGD,GAjBQ,EAiBN,CAAChB,IAAD,EAAOe,KAAP,EAAcH,KAAd,CAjBM,CAAT;;AAmBA,WAASO,UAAT,CAAoBb,IAApB,EAA0B;AACxB,WAAO;AACLQ,MAAAA,EAAE,EAAER,IAAI,CAACQ,EADJ;AAELb,MAAAA,KAAK,EAAEK,IAAI,CAACL,KAFP;AAGLC,MAAAA,iBAAiB,EAAEI,IAAI,CAACJ,iBAHnB;AAILC,MAAAA,kBAAkB,EAAEG,IAAI,CAACH,kBAJpB;AAKLC,MAAAA,IAAI,EAAEE,IAAI,CAACF,IALN;AAMLC,MAAAA,KAAK,EAAEC,IAAI,CAACD;AANP,KAAP;AAQD;;AAED,QAAMe,MAAM,GAAG;AACbN,IAAAA,EAAE,EAAEvB,GAAG,CAAC8B,MAAJ,EADS;AAEbpB,IAAAA,KAAK,EAAEV,GAAG,CAAC+B,MAAJ,GAAaC,QAAb,EAFM;AAGbrB,IAAAA,iBAAiB,EAAEX,GAAG,CAAC+B,MAAJ,GAAaE,KAAb,CAAmB,EAAnB,CAHN;AAIbrB,IAAAA,kBAAkB,EAAEZ,GAAG,CAAC+B,MAAJ,GAAaE,KAAb,CAAmB,EAAnB,CAJP;AAKbpB,IAAAA,IAAI,EAAEb,GAAG,CAAC8B,MAAJ,GACHI,GADG,CACC,CADD,EAEHC,GAFG,CAEC,EAFD,EAGHH,QAHG,EALO;AASblB,IAAAA,KAAK,EAAEd,GAAG,CAAC+B,MAAJ,GAAaC,QAAb;AATM,GAAf;;AAYA,WAASI,aAAT,GAAyB;AACvB,UAAMC,OAAO,GAAGpB,MAAM,CACnBqB,MADa,CACNxB,KAAK,IAAIA,KAAK,CAACyB,IAAN,KAAexB,IAAI,CAACD,KADvB,EAEb0B,GAFa,CAET1B,KAAK,IAAIA,KAAK,CAACS,EAFN,EAEU,CAFV,CAAhB;AAGA,6BAAYR,IAAZ;AAAkBD,MAAAA,KAAK,EAAEuB;AAAzB;AACD,GA5D4C,CA8D7C;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;AAEA,iBAAeI,QAAf,GAA0B;AACxB,UAAMC,UAAU,GAAGN,aAAa,EAAhC;AACA,QAAI,CAACZ,KAAL,EAAY,MAAMtB,UAAU,CAACa,IAAI,CAACQ,EAAN,EAAUmB,UAAV,CAAhB,CAAZ,KACK,MAAMvC,QAAQ,CAACuC,UAAD,CAAd;AACLnC,IAAAA,OAAO,CAACoC,IAAR,CAAa,GAAb;AACD,GAzG4C,CA2G7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SACE;AAAM,IAAA,QAAQ,EAAEC,CAAC,IAAIC,YAAY,CAACD,CAAD,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGE,WAAW,CAAC,OAAD,EAAU,OAAV,CADd,EAEGA,WAAW,CAAC,MAAD,EAAS,MAAT,CAFd,EAGGA,WAAW,CAAC,mBAAD,EAAsB,MAAtB,CAHd,EAIGA,WAAW,CAAC,oBAAD,EAAuB,aAAvB,CAJd,EAKGC,YAAY,CAAC,OAAD,EAAU,OAAV,CALf,EAMGC,YAAY,CAAC,MAAD,CANf,CADF;AAUD,CAzJD;;AA2JA,eAAe1C,QAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Joi from \"joi-browser\";\n\nimport { getBook, updateBook, saveBook } from \"../services/booksService\";\nimport { getGenres } from \"../services/genresService\";\nimport Form from \"./common/form\";\n\nconst BookForm = ({ history, match: item }) => {\n  const [book, setBook] = useState({\n    title: \"\",\n    author_first_name: \"\",\n    author_second_name: \"\",\n    rate: \"\",\n    genre: \"\"\n  });\n  const [genres, setGenres] = useState([]);\n  const [errors, setErrors] = useState({});\n  const urlId = item.params.id;\n  const isNew = urlId === \"new\" ? true : false;\n\n  useEffect(() => {\n    let shouldIgnore = false;\n\n    async function fetchGenres() {\n      const genres = await getGenres();\n      if (!shouldIgnore) setGenres(genres);\n    }\n\n    async function fetchBook() {\n      const book = await getBook(urlId);\n      if (!shouldIgnore) setBook(mapToState(book));\n    }\n    fetchGenres();\n    if (!isNew) fetchBook();\n    return () => {\n      shouldIgnore = true;\n    };\n  }, [item, isNew, urlId]);\n\n  function mapToState(book) {\n    return {\n      id: book.id,\n      title: book.title,\n      author_first_name: book.author_first_name,\n      author_second_name: book.author_second_name,\n      rate: book.rate,\n      genre: book.genre\n    };\n  }\n\n  const schema = {\n    id: Joi.number(),\n    title: Joi.string().required(),\n    author_first_name: Joi.string().allow(\"\"),\n    author_second_name: Joi.string().allow(\"\"),\n    rate: Joi.number()\n      .min(1)\n      .max(10)\n      .required(),\n    genre: Joi.string().required()\n  };\n\n  function mapToFetchApi() {\n    const genreId = genres\n      .filter(genre => genre.name === book.genre)\n      .map(genre => genre.id)[0];\n    return { ...book, genre: genreId };\n  }\n\n  // function validate() {\n  //   const options = { abortEarly: false };\n  //   const { error } = Joi.validate(book, schema, options);\n  //   if (!error) return null;\n\n  //   const errors = {};\n  //   for (let item of error.details) errors[item.path[0]] = item.message;\n  //   return errors;\n  // }\n\n  // function validateProperty({ name, value }) {\n  //   const obj = { [name]: value };\n  //   const propertySchema = { [name]: schema[name] };\n  //   const { error } = Joi.validate(obj, propertySchema);\n\n  //   return error ? error.details[0].message : null;\n  // }\n\n  // function handleChange({ currentTarget: input }) {\n  //   const allErrors = errors;\n  //   const errorMessage = validateProperty(input);\n  //   if (errorMessage) allErrors[input.name] = errorMessage;\n  //   else delete allErrors[input.name];\n\n  //   setErrors(allErrors);\n  //   setBook({ ...book, [input.name]: input.value });\n  // }\n\n  // function handleSubmit(e) {\n  //   e.preventDefault();\n\n  //   const errors = validate();\n  //   setErrors(errors || {});\n  //   if (errors) return;\n\n  //   doSubmit();\n  // }\n\n  async function doSubmit() {\n    const mappedBook = mapToFetchApi();\n    if (!isNew) await updateBook(book.id, mappedBook);\n    else await saveBook(mappedBook);\n    history.push(\"/\");\n  }\n\n  // function renderInput(name, label, type = \"text\") {\n  //   return (\n  //     <Input\n  //       name={name}\n  //       label={label}\n  //       type={type}\n  //       item={book}\n  //       setItem={setBook}\n  //       handleChange={handleChange}\n  //       error={errors[name]}\n  //     />\n  //   );\n  // }\n\n  // function renderSelect(name, label) {\n  //   return (\n  //     <Select\n  //       name={name}\n  //       label={label}\n  //       options={genres}\n  //       item={book}\n  //       setItem={setBook}\n  //       handleChange={handleChange}\n  //       error={errors[name]}\n  //     />\n  //   );\n  // }\n\n  // function renderButton(label) {\n  //   return (\n  //     <button type=\"submit\" className=\"btn btn-primary\" disabled={validate()}>\n  //       {label}\n  //     </button>\n  //   );\n  // }\n\n  return (\n    <form onSubmit={e => handleSubmit(e)}>\n      {renderInput(\"title\", \"Title\")}\n      {renderInput(\"rate\", \"Rate\")}\n      {renderInput(\"author_first_name\", \"Name\")}\n      {renderInput(\"author_second_name\", \"Second name\")}\n      {renderSelect(\"genre\", \"Genre\")}\n      {renderButton(\"save\")}\n    </form>\n  );\n};\n\nexport default BookForm;\n"]},"metadata":{},"sourceType":"module"}