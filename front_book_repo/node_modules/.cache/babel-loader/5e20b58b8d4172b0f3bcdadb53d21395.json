{"ast":null,"code":"import _objectSpread from \"/home/balaclava/Desktop/Javascript/react/100daysCode/01-Book_system/front_book_repo/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/balaclava/Desktop/Javascript/react/100daysCode/01-Book_system/front_book_repo/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/balaclava/Desktop/Javascript/react/100daysCode/01-Book_system/front_book_repo/src/components/registerForm.jsx\";\nimport React, { useState } from \"react\";\nimport Joi from \"joi-browser\";\nimport { register } from \"../services/userServices\";\nimport Form from \"./common/form\";\n\nconst RegisterForm = ({\n  history\n}) => {\n  const _useState = useState({\n    username: \"\",\n    email: \"\",\n    emailConfirmation: \"\",\n    password: \"\"\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        user = _useState2[0],\n        setUser = _useState2[1];\n\n  const _useState3 = useState({}),\n        _useState4 = _slicedToArray(_useState3, 2),\n        errors = _useState4[0],\n        setErrors = _useState4[1];\n\n  const schema = {\n    username: Joi.string().required().label(\"Username\"),\n    email: Joi.string().required().email().label(\"Email\"),\n    emailConfirmation: Joi.string().required().email().label(\"Mail confirmation\"),\n    password: Joi.string().regex(/^[\\w!.-]{3,30}$/).required().label(\"Password\").error(() => {\n      return {\n        message: \"Password must contain at least 5 alphanumeric characters and/or the following special characters: !_-.\"\n      };\n    })\n  };\n  const inputList = [{\n    name: \"username\",\n    label: \"Username\",\n    value: user.username,\n    element: \"Input\"\n  }, {\n    name: \"email\",\n    label: \"Email\",\n    value: user.email,\n    element: \"Input\"\n  }, {\n    name: \"emailConfirmation\",\n    label: \"Email confirmation\",\n    value: user.emailConfirmation,\n    element: \"Input\"\n  }, {\n    name: \"password\",\n    label: \"Password\",\n    value: user.password,\n    element: \"Input\",\n    type: \"password\"\n  }, {\n    label: \"Submit\",\n    element: \"Button\"\n  }];\n\n  async function doSubmit() {\n    try {\n      await register(user);\n      history.push(\"/login\");\n    } catch (ex) {\n      if (ex.response && ex.response.status >= 400 && ex.response.status <= 500) {\n        const exResponse = Object.entries(ex.response.data);\n        let newErrors = {};\n\n        for (let exception of exResponse) {\n          newErrors[exception[0]] = exception[1][0];\n        }\n\n        setErrors(_objectSpread({}, errors, {}, newErrors));\n      }\n    }\n  }\n\n  return React.createElement(Form, {\n    inputList: inputList,\n    data: user,\n    setData: setUser,\n    errors: errors,\n    setErrors: setErrors,\n    schema: schema,\n    doSubmit: doSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  });\n};\n\nexport default RegisterForm;","map":{"version":3,"sources":["/home/balaclava/Desktop/Javascript/react/100daysCode/01-Book_system/front_book_repo/src/components/registerForm.jsx"],"names":["React","useState","Joi","register","Form","RegisterForm","history","username","email","emailConfirmation","password","user","setUser","errors","setErrors","schema","string","required","label","regex","error","message","inputList","name","value","element","type","doSubmit","push","ex","response","status","exResponse","Object","entries","data","newErrors","exception"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Joi from \"joi-browser\";\n\nimport { register } from \"../services/userServices\";\nimport Form from \"./common/form\";\n\nconst RegisterForm = ({ history }) => {\n  const [user, setUser] = useState({\n    username: \"\",\n    email: \"\",\n    emailConfirmation: \"\",\n    password: \"\"\n  });\n\n  const [errors, setErrors] = useState({});\n\n  const schema = {\n    username: Joi.string()\n      .required()\n      .label(\"Username\"),\n    email: Joi.string()\n      .required()\n      .email()\n      .label(\"Email\"),\n    emailConfirmation: Joi.string()\n      .required()\n      .email()\n      .label(\"Mail confirmation\"),\n    password: Joi.string()\n      .regex(/^[\\w!.-]{3,30}$/)\n      .required()\n      .label(\"Password\")\n      .error(() => {\n        return {\n          message:\n            \"Password must contain at least 5 alphanumeric characters and/or the following special characters: !_-.\"\n        };\n      })\n  };\n\n  const inputList = [\n    {\n      name: \"username\",\n      label: \"Username\",\n      value: user.username,\n      element: \"Input\"\n    },\n    { name: \"email\", label: \"Email\", value: user.email, element: \"Input\" },\n    {\n      name: \"emailConfirmation\",\n      label: \"Email confirmation\",\n      value: user.emailConfirmation,\n      element: \"Input\"\n    },\n    {\n      name: \"password\",\n      label: \"Password\",\n      value: user.password,\n      element: \"Input\",\n      type: \"password\"\n    },\n    { label: \"Submit\", element: \"Button\" }\n  ];\n\n  async function doSubmit() {\n    try {\n      await register(user);\n      history.push(\"/login\");\n    } catch (ex) {\n      if (\n        ex.response &&\n        ex.response.status >= 400 &&\n        ex.response.status <= 500\n      ) {\n        const exResponse = Object.entries(ex.response.data);\n        let newErrors = {};\n\n        for (let exception of exResponse) {\n          newErrors[exception[0]] = exception[1][0];\n        }\n\n        setErrors({ ...errors, ...newErrors });\n      }\n    }\n  }\n\n  return (\n    <Form\n      inputList={inputList}\n      data={user}\n      setData={setUser}\n      errors={errors}\n      setErrors={setErrors}\n      schema={schema}\n      doSubmit={doSubmit}\n    />\n  );\n};\n\nexport default RegisterForm;\n"]},"metadata":{},"sourceType":"module"}